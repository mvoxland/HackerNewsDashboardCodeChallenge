@page "/"

@using HackerNewsDashboard.Common.DTO
@inject HttpClient httpClient
@inject DialogService DialogService

<PageTitle>Dashboard</PageTitle>
<h1>Dashboard</h1>

<RadzenCard>
    <h5>Best Stories</h5>

    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@bestStories" TItem="HNStory" EmptyText="There was a problem fetching this data. Please come back and try again.">
        <Template Context="story">
            <RadzenCard Style="width:300px;">
                <div class="row">
                    <div class="col">
                        <h5>@story.Title</h5>
                        <RadzenLink Text="@story.Url" Path="@story.Url" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text=@($"Score: {story.Score}") />
                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"Comments: {story.Kids?.Count()} ({story.Descendants})") />
                        <RadzenBadge BadgeStyle="BadgeStyle.Base" Text=@($"Posted: {(story.Time is not null ? DateTimeOffset.FromUnixTimeSeconds(story.Time!.Value).ToLocalTime().DateTime.ToString("MM/dd/yyyy HH:mm tt") : null)}") />
                    </div>
                </div>
                <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                <div class="row">
                    <div class="col">
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Variant="Variant.Text" Text=@($"User Comments: {story.UserComments?.Count()}") 
                                Click="@(async() => await DialogService.OpenAsync<CommentsPopup>("Comments", parameters: new(){{"HNStory", story}}))" />
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <RadzenPager Density="@Density.Compact" HorizontalAlign="HorizontalAlign.Center" Count="@count" PageSize="@pageSize" PageNumbersCount="6" PageChanged="@PageChanged" />
</RadzenCard>

@code {
    int pageSize = 6;
    int count;
    IEnumerable<HNStory>? bestStories;

    protected override async Task OnInitializedAsync()
    {
        await GetStories(0, pageSize);
    }

    async Task PageChanged(PagerEventArgs args)
    {
        await GetStories(args.Skip, args.Top);
    }

    async Task GetStories(int skip, int take)
    {
        StoriesWithCount? response = null;
        try { response = await httpClient.GetFromJsonAsync<StoriesWithCount?>($"api/bestStoriesPreviewList?skip={skip}&take={take}"); } catch { }
        bestStories = response?.Stories;
        count = response?.Count ?? 0;
    }
}