@page "/register"

@using HackerNewsDashboard.Client.Services
@using HackerNewsDashboard.Common.DTO
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>
<h1>Register</h1>

@if (!string.IsNullOrEmpty(error))
{
    <RadzenAlert AlertStyle="AlertStyle.Danger">@error</RadzenAlert>
}


<RadzenTemplateForm Data="@("data")" Submit="@(async (string arg) => await HandleRegister())">
    <div class="row">
        <div class="col">
            <RadzenLabel Component="email" Text="Email: " />
            <RadzenTextBox @bind-Value="email" Placeholder="Email" Name="email" Disabled="@isLoading" />
            <RadzenRequiredValidator Component="email" Text="*Required" />
            <RadzenEmailValidator Component="email" Text="*Must be a valid Email" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenLabel Component="password" Text="Password: " />
            <RadzenPassword @bind-Value="password" Placeholder="Password" Name="password" Disabled="@isLoading" />
            <RadzenRequiredValidator Component="password" Text="*Required" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenLabel Component="username" Text="Username: " />
            <RadzenPassword @bind-Value="username" Placeholder="Username" Name="username" Disabled="@isLoading" />
            <RadzenRequiredValidator Component="username" Text="*Required" />
        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Register" IsBusy="@isLoading" />
        </div>
    </div>
</RadzenTemplateForm>

<p class="mt-4">If you already have an account, <RadzenLink Text="Login" Path="/login" /></p>

@code {
    string username = "";
    string password = "";
    string email = "";

    string error = "";

    bool isLoading;

    async Task HandleRegister()
    {
        isLoading = true;
        StateHasChanged();

        var result = await AuthService.Register(new Common.DTO.Register() { Username = username, Email = email, Password = password });
        if (result is not null && result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            string? message = null;
            try
            {
                message = await result?.Content?.ReadAsStringAsync()!;
            }
            catch { }
            error = message ?? "Error registering, please try again later.";
        }

        isLoading = false;
    }
}