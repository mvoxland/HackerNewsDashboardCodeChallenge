@using HackerNewsDashboard.Client.Providers
@using HackerNewsDashboard.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits LayoutComponentBase

<RadzenComponents @rendermode="@(new InteractiveWebAssemblyRenderMode(prerender: false))" />

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <div class="row w-100">
                <div class="col d-flex" style="align-items:center;">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                    <RadzenLabel @onclick="@(() => NavigationManager.NavigateTo("/"))" Style="cursor:pointer;"><h4>Hacker News Dashboard</h4></RadzenLabel>
                </div>
                <div class="col d-flex flex-wrap flex-row-reverse" style="align-items:center;">
                    @if (AuthState?.User.Identity?.IsAuthenticated == true)
                    {
                        <RadzenButton Text="Logout" Click="@(() => NavigationManager.NavigateTo("/logout"))" class="ms-2" />
                        @* <span>Hello @AuthState.User.Identity.Name</span> *@
                    }
                    else
                    {
                        <RadzenButton Text="Login" Click="@(() => NavigationManager.NavigateTo("/login"))" class="ms-2" />
                        <RadzenButton Text="Register" Click="@(() => NavigationManager.NavigateTo("/register"))" class="ms-2" />
                    }
                </div>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <article class="content px-4">
            @Body
        </article>
    </RadzenBody>
</RadzenLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code{
    AuthenticationState? AuthState;

    bool sidebarExpanded = true;

    protected override async Task OnParametersSetAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        //Force an unauthenticated user to login or register. More of a quality of life feature than anything, they wouldn't be able to get data from the api methods.
        if (AuthState?.User.Identity?.IsAuthenticated != true && !(NavigationManager.Uri.ToLower().EndsWith("/login") || NavigationManager.Uri.ToLower().EndsWith("/register")))
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
